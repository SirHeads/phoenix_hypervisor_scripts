# Proposed Changes for Phoenix Hypervisor Setup Scripts

This document outlines proposed changes to enhance the reliability, security, and maintainability of the Phoenix Hypervisor setup scripts (`phoenix_establish_hypervisor.sh`, `phoenix_hypervisor_initial_setup.sh`, `phoenix_hypervisor_create_lxc.sh`, `phoenix_hypervisor_setup_drdevstral.sh`) for deployment on Proxmox VE 8.4.6. These changes address potential issues identified in the setup process, including wiping Phoenix, reinstalling Proxmox, and running the scripts to establish an LXC container with vLLM services.

## General Setup Process

### 1. Wiping Phoenix and Reinstalling Proxmox
- **Backup Critical Data**:
  - Before wiping Phoenix, back up all critical data (e.g., LXC configurations, ZFS datasets, logs) to an external storage device or network location.
  - Command: `tar -czvf /mnt/external/phoenix_backup_$(date +%F).tar.gz /etc/pve /var/lib/pve-cluster /fastData`.
- **Verify Proxmox Version**:
  - Download and install Proxmox VE 8.4.6 explicitly to match the tested version.
  - Command: `wget https://enterprise.proxmox.com/iso/proxmox-ve_8.4-6.iso` (use correct URL from Proxmox official site).
  - Verify: `sha256sum proxmox-ve_8.4-6.iso` against published checksum.
- **Ensure Stable Installation**:
  - Use a wired network connection to avoid interruptions.
  - Verify hardware compatibility (e.g., NICs, GPUs) using Proxmox HCL: `lspci -nn | grep -E 'VGA|Ethernet'`.
- **Snapshot Option**:
  - If feasible, create a snapshot of the current Phoenix state before wiping using your backup solution.

### 2. Rebuilding Phoenix with External Scripting Project
- **Document External Project**:
  - Clarify the external project's purpose (e.g., ZFS setup, driver installation).
  - Ensure it creates required ZFS pool (`quickOS/lxc-disks`) and LXC template (`/fastData/shared-iso/template/cache/ubuntu-24.04-standard_24.04-2_amd64.tar.zst`).
- **Test Compatibility**:
  - Run external scripts in a Proxmox 8.4.6 VM to confirm compatibility.
  - Command: `bash external_script.sh > external_script.log 2>&1` and review logs.
- **Check Prerequisites**:
  - Verify ZFS pool: `zfs list quickOS/lxc-disks`.
  - Verify template: `ls /fastData/shared-iso/template/cache/ubuntu-24.04-standard_24.04-2_amd64.tar.zst`.

## Script-Specific Changes

### 1. `phoenix_establish_hypervisor.sh`
- **Secure Token Handling**:
  - Store `HUGGING_FACE_HUB_TOKEN` and `LXC_PASSWORD` in an encrypted file.
  - Example: `echo $HUGGING_FACE_HUB_TOKEN | openssl enc -aes-256-cbc -salt -out /root/.phoenix_secrets.enc`.
  - Modify script to decrypt: `source <(openssl enc -aes-256-cbc -d -in /root/.phoenix_secrets.enc)`.
  - Set permissions: `chmod 600 /root/.phoenix_secrets.enc`.
- **Enhance GPU Detection**:
  - Add fallback check if `nvidia-smi` fails:
    ```bash
    if ! nvidia-smi >/dev/null 2>&1; then
        nvidia-container-cli info >/dev/null 2>&1 || { echo "No NVIDIA GPU detected"; exit 1; }
    fi
    ```
- **Improve Rollback**:
  - Extend rollback to undo initial setup changes:
    ```bash
    rollback() {
        echo "Rolling back changes..."
        pct destroy $CONTAINER_ID 2>/dev/null
        apt-get remove -y jq check-jsonschema 2>/dev/null
        mv /etc/apt/sources.list.bak /etc/apt/sources.list 2>/dev/null
    }
    ```
- **Increase Logging**:
  - Log GPU validation and sub-script execution to `/var/log/phoenix_hypervisor/phoenix_hypervisor.log`:
    ```bash
    echo "$(date): Validating GPU: $(nvidia-smi --query-gpu=name --format=csv)" >> /var/log/phoenix_hypervisor/phoenix_hypervisor.log
    ```

### 2. `phoenix_hypervisor_initial_setup.sh`
- **Retry Logic for Tool Installation**:
  - Ensure stable network for `apt-get install`:
    ```bash
    for i in {1..3}; do apt-get update && apt-get install -y jq check-jsonschema && break || sleep 5; done
    ```
- **Relax Version Checks**:
  - Allow Proxmox 8.x and kernel ≥5.x with warnings:
    ```bash
    pveversion | grep -q "pve-manager/8" || { echo "WARNING: Untested Proxmox version"; }
    uname -r | grep -Eq "^[5-8]\." || { echo "WARNING: Untested kernel version"; }
    ```
- **Functional GPU Check**:
  - Verify driver functionality:
    ```bash
    nvidia-smi -l 1 >/dev/null 2>&1 || { echo "NVIDIA driver not functional"; exit 1; }
    ```
- **Full Rollback**:
  - Uninstall packages on failure:
    ```bash
    rollback() {
        mv /etc/apt/sources.list.bak /etc/apt/sources.list 2>/dev/null
        apt-get remove -y jq check-jsonschema pve-headers 2>/dev/null
        update-initramfs -u
    }
    ```

### 3. `phoenix_hypervisor_create_lxc.sh`
- **Strengthen Network Validation**:
  - Enforce strict CIDR parsing in `validate_network_cidr`:
    ```bash
    validate_network_cidr() {
        local cidr=$1
        if ! echo "$cidr" | grep -Eq "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$"; then
            echo "Invalid CIDR: $cidr"
            exit 1
        fi
        ping -c 1 $(echo $cidr | cut -d'/' -f1) >/dev/null 2>&1 || { echo "Gateway unreachable"; exit 1; }
    }
    ```
- **GPU Robustness**:
  - Verify device files before passthrough:
    ```bash
    for dev in /dev/nvidia0 /dev/nvidia-ctl /dev/nvidia-uvm; do
        [ -e "$dev" ] || { echo "Missing GPU device: $dev"; exit 1; }
    done
    ```
  - Rollback GPU config:
    ```bash
    rollback() {
        pct destroy $CONTAINER_ID 2>/dev/null
        rm -f /etc/pve/lxc/$CONTAINER_ID.conf 2>/dev/null
        echo "Removed GPU passthrough config" >> /var/log/phoenix_hypervisor/phoenix_hypervisor.log
    }
    ```
- **Network Flexibility**:
  - Ping gateway instead of 8.8.8.8:
    ```bash
    wait_for_lxc_network() {
        for i in {1..30}; do
            pct exec $CONTAINER_ID -- ping -c 1 10.0.0.1 >/dev/null 2>&1 && return 0
            sleep 2
        done
        return 1
    }
    ```
- **Timeout Tuning**:
  - Increase timeouts for slower hardware:
    ```bash
    wait_for_lxc_running() {
        for i in {1..60}; do
            [ "$(pct status $CONTAINER_ID)" = "status: running" ] && return 0
            sleep 3
        done
        return 1
    }
    ```

### 4. `phoenix_hypervisor_setup_drdevstral.sh`
- **Improve OS Detection**:
  - Use `/etc/os-release` as fallback:
    ```bash
    OS_CODENAME=$(lsb_release -cs 2>/dev/null || grep "^VERSION_CODENAME=" /etc/os-release | cut -d'=' -f2 | tr -d '"')
    [ -z "$OS_CODENAME" ] && OS_CODENAME="noble"
    ```
- **Retry Downloads**:
  - Retry Docker/NVIDIA key fetches:
    ```bash
    for i in {1..3}; do
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - && break || sleep 5
    done
    ```
- **Driver Sync**:
  - Log and compare NVIDIA driver versions:
    ```bash
    HOST_DRIVER=$(nvidia-smi --query-gpu=driver_version --format=csv -i 0 | tail -n1)
    echo "Host NVIDIA driver: $HOST_DRIVER" >> /var/log/phoenix_hypervisor/phoenix_hypervisor.log
    ```
- **Health Check Tuning**:
  - Increase attempts and delay:
    ```bash
    for i in {1..10}; do
        pct exec $CONTAINER_ID -- curl -s http://localhost:8000/v1/health && break
        sleep 20
    done || { echo "vLLM health check failed"; exit 1; }
    ```

## Additional Recommendations
- **Testing**:
  - Test in a Proxmox 8.4.6 VM: `qm create 900 --memory 2048 --net0 virtio,bridge=vmbr0 --cdrom proxmox-ve_8.4-6.iso`.
  - Simulate failures (e.g., unplug network, remove GPU devices) to verify rollbacks.
- **Backup**:
  - Snapshot clean Proxmox state: `qm snapshot 900 clean_state`.
- **Monitoring**:
  - Monitor LXC and vLLM: `watch -n 60 'pct status 901 && curl -s http://10.0.0.2:8000/v1/health'`.
- **Automation**:
  - Create a wrapper script:
    ```bash
    #!/bin/bash
    set -e
    export HUGGING_FACE_HUB_TOKEN=$(openssl enc -aes-256-cbc -d -in /root/.phoenix_secrets.enc | grep HUGGING_FACE_HUB_TOKEN | cut -d'=' -f2)
    export LXC_PASSWORD=$(openssl enc -aes-256-cbc -d -in /root/.phoenix_secrets.enc | grep LXC_PASSWORD | cut -d'=' -f2)
    bash phoenix_establish_hypervisor.sh
    ```
- **Documentation**:
  - Create `README.md` with prerequisites (e.g., NVIDIA driver ≥535, Ubuntu 24.04 template), setup steps, and troubleshooting (e.g., `journalctl -u phoenix-vllm` for vLLM errors).

## Conclusion
These changes enhance error handling, security, and robustness, ensuring a smoother setup process. Test all modifications in a controlled environment before applying to production.