#!/bin/bash
# Phoenix Hypervisor Container Destruction Script
# Destroys containers and cleans up all associated resources
# Prerequisites:
# - Proxmox VE 8.x (tested with 8.4.6)
# - Root privileges
# - phoenix_hypervisor_common.sh sourced
# Usage: ./phoenix_hypervisor_destroy.sh [--force] [<container_id>]
# Version: 1.7.4
# Author: Assistant

set -euo pipefail

# Source configuration first
if [[ -f "/usr/local/bin/phoenix_hypervisor_config.sh" ]]; then
    source /usr/local/bin/phoenix_hypervisor_config.sh
else
    echo "Configuration file not found: /usr/local/bin/phoenix_hypervisor_config.sh"
    exit 1
fi

# Source common functions
if [[ -f "/usr/local/bin/phoenix_hypervisor/phoenix_hypervisor_common.sh" ]]; then
    source /usr/local/bin/phoenix_hypervisor/phoenix_hypervisor_common.sh
else
    echo "Common functions file not found: /usr/local/bin/phoenix_hypervisor/phoenix_hypervisor_common.sh"
    exit 1
fi

# --- Enhanced User Experience Functions ---
log_info() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S %Z')] [INFO] $1" >&2
}

log_warn() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S %Z')] [WARN] $1" >&2
}

log_error() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S %Z')] [ERROR] $1" >&2
}

# --- Enhanced Container Destruction Functions ---
destroy_container() {
    local container_id="$1"
    local force="${2:-false}"
    
    if [[ -z "$container_id" ]]; then
        log_error "Container ID cannot be empty"
        return 1
    fi
    
    # Check if container exists
    if ! pct status "$container_id" >/dev/null 2>&1; then
        log_warn "Container $container_id does not exist or is not accessible"
        return 0
    fi
    
    log_info "Starting destruction process for container $container_id..."
    
    # Stop container if running (with retry logic)
    local max_attempts=5
    local attempt=1
    
    while [[ $attempt -le $max_attempts ]]; do
        if pct status "$container_id" >/dev/null 2>&1; then
            log_info "Stopping container $container_id (attempt $attempt/$max_attempts)..."
            if pct stop "$container_id" 2>/dev/null; then
                log_info "Container $container_id stopped successfully"
                break
            else
                log_warn "Failed to stop container $container_id on attempt $attempt"
                sleep 2
                ((attempt++))
            fi
        else
            log_info "Container $container_id is already stopped"
            break
        fi
    done
    
    if [[ $attempt -gt $max_attempts ]]; then
        log_warn "Failed to stop container $container_id after $max_attempts attempts"
        if [[ "$force" == "true" ]]; then
            log_info "Force destruction requested, continuing with purge..."
        else
            log_error "Failed to stop container $container_id. Use --force to proceed anyway."
            return 1
        fi
    fi
    
    # Destroy container with purge
    log_info "Destroying container $container_id with purge..."
    
    if pct destroy "$container_id" --purge; then
        log_info "Container $container_id destroyed successfully"
        
        # Remove marker file if it exists
        local marker_file="$HYPERVISOR_MARKER_DIR/container_$container_id_created"
        if [[ -f "$marker_file" ]]; then
            rm -f "$marker_file"
            log_info "Removed container marker file: $marker_file"
        fi
        
        return 0
    else
        log_error "Failed to destroy container $container_id"
        return 1
    fi
}

# --- Enhanced Cleanup Functions ---
cleanup_container_resources() {
    local container_id="$1"
    
    if [[ -z "$container_id" ]]; then
        return 1
    fi
    
    log_info "Cleaning up resources for container $container_id..."
    
    # Remove any remaining directories
    local dirs_to_clean=(
        "/var/lib/lxc/$container_id"
        "/var/lib/phoenix_hypervisor/containers/$container_id"
        "/home/vllm/models/$container_id"
    )
    
    for dir in "${dirs_to_clean[@]}"; do
        if [[ -d "$dir" ]]; then
            log_info "Cleaning up directory: $dir"
            rm -rf "$dir"
        fi
    done
    
    # Remove any associated configuration files
    local config_files=(
        "/usr/local/etc/container_$container_id.json"
        "/var/lib/phoenix_hypervisor/configs/$container_id.conf"
    )
    
    for file in "${config_files[@]}"; do
        if [[ -f "$file" ]]; then
            log_info "Removing configuration file: $file"
            rm -f "$file"
        fi
    done
    
    log_info "Resource cleanup completed for container $container_id"
}

# --- Enhanced Validation ---
validate_destruction() {
    local container_id="$1"
    
    if [[ -z "$container_id" ]]; then
        return 1
    fi
    
    # Verify container is completely gone
    if pct status "$container_id" >/dev/null 2>&1; then
        log_error "Container $container_id still exists after destruction"
        return 1
    fi
    
    # Check for any remaining directories
    local remaining_dirs=(
        "/var/lib/lxc/$container_id"
        "/var/lib/phoenix_hypervisor/containers/$container_id"
    )
    
    for dir in "${remaining_dirs[@]}"; do
        if [[ -d "$dir" ]]; then
            log_warn "Remaining directory found after destruction: $dir"
        fi
    done
    
    log_info "Destruction validation passed for container $container_id"
    return 0
}

# --- Enhanced Main Function ---
main() {
    log_info "Starting Phoenix Hypervisor container destruction process..."
    echo ""
    echo "==============================================="
    echo "PHOENIX HYPERTORVISOR CONTAINER DESTRUCTION"
    echo "==============================================="
    echo ""
    
    # Verify prerequisites
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root"
        exit 1
    fi
    
    if ! command -v pct >/dev/null 2>&1; then
        log_error "Proxmox Container Toolkit (pct) is required but not installed"
        exit 1
    fi
    
    # Parse arguments
    local force=false
    local container_id=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --force)
                force=true
                shift
                ;;
            *)
                container_id="$1"
                shift
                ;;
        esac
    done
    
    # Validate container ID
    if [[ -z "$container_id" ]]; then
        log_error "Container ID is required as argument"
        echo "Usage: $0 [--force] <container_id>"
        echo "  --force     Force destruction even if stop fails"
        echo "  <container_id>  Container ID to destroy (e.g., 901)"
        exit 1
    fi
    
    # Validate LXC ID format
    if ! validate_lxc_id "$container_id"; then
        log_error "Invalid container ID format: $container_id"
        exit 1
    fi
    
    # Show destruction summary
    echo ""
    echo "Destruction Configuration:"
    echo "--------------------------"
    echo "Container ID: $container_id"
    echo "Force Mode: $force"
    echo ""
    
    # Confirm with user before proceeding
    read -p "Do you want to proceed with destruction of container $container_id? (yes/no): " confirm
    if [[ "$confirm" != "yes" ]]; then
        log_info "Destruction cancelled by user."
        exit 0
    fi
    
    # Destroy the container
    if destroy_container "$container_id" "$force"; then
        log_info "Container $container_id destroyed successfully"
        
        # Cleanup resources
        if cleanup_container_resources "$container_id"; then
            log_info "Resource cleanup completed for container $container_id"
        else
            log_warn "Resource cleanup encountered issues for container $container_id"
        fi
        
        # Validate destruction
        if validate_destruction "$container_id"; then
            echo ""
            echo "==============================================="
            echo "DESTRUCTION COMPLETE"
            echo "Container ID: $container_id"
            echo "Status: SUCCESS"
            echo "==============================================="
            log_info "All operations completed successfully for container $container_id"
            exit 0
        else
            log_error "Validation failed for container $container_id"
            exit 1
        fi
    else
        log_error "Failed to destroy container $container_id"
        exit 1
    fi
}

# --- Enhanced Cleanup ---
cleanup() {
    # Cleanup logic would go here if needed
    log_info "Cleanup completed"
}

main "$@"