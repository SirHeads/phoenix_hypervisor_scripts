#!/bin/bash
# Setup script for drdevstral container with vLLM and NVIDIA support
# This script configures the drdevstral LXC container to run vLLM inference with GPU acceleration
# Prerequisites:
# - LXC container already created with ID 901
# - NVIDIA drivers available in container
# - Phoenix Hypervisor configuration loaded
# Usage: ./phoenix_hypervisor_setup_drdevstral.sh <container_id>
# Version: 1.7.4
# Author: Assistant

set -euo pipefail

# Source configuration first
if [[ -f "/usr/local/bin/phoenix_hypervisor_config.sh" ]]; then
    source /usr/local/bin/phoenix_hypervisor_config.sh
else
    echo "Configuration file not found: /usr/local/bin/phoenix_hypervisor_config.sh"
    exit 1
fi

# Source common functions
if [[ -f "/usr/local/bin/phoenix_hypervisor/phoenix_hypervisor_common.sh" ]]; then
    source /usr/local/bin/phoenix_hypervisor/phoenix_hypervisor_common.sh
else
    echo "Common functions file not found: /usr/local/bin/phoenix_hypervisor/phoenix_hypervisor_common.sh"
    exit 1
fi

# --- Enhanced User Experience Functions ---
log_info() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S %Z')] [INFO] $1" >&2
}

log_warn() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S %Z')] [WARN] $1" >&2
}

log_error() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S %Z')] [ERROR] $1" >&2
}

# --- Enhanced Setup Functions ---
setup_container_environment() {
    local container_id="$1"
    
    log_info "Setting up container environment for $container_id..."
    
    # Verify container exists and is running
    if ! pct status "$container_id" >/dev/null 2>&1; then
        log_error "Container $container_id does not exist or is not accessible"
        return 1
    fi
    
    # Get GPU assignment for this container
    local gpu_assignment
    gpu_assignment=$(get_gpu_assignment "$container_id")
    
    log_info "GPU assignment for container $container_id: $gpu_assignment"
    
    # Check if NVIDIA drivers are available in container
    local nvidia_check_cmd="nvidia-smi --query-gpu=driver_version --format=csv,noheader,nounits 2>/dev/null || echo 'not_found'"
    local driver_version
    driver_version=$(pct exec "$container_id" -- bash -c "$nvidia_check_cmd")
    
    if [[ "$driver_version" == "not_found" ]]; then
        log_warn "NVIDIA drivers not found in container $container_id. GPU acceleration will be limited."
        # Continue with CPU setup as fallback
    else
        log_info "NVIDIA driver version found in container: $driver_version"
    fi
    
    # Create necessary directories in container
    local create_dirs_cmd="
        mkdir -p /home/vllm/models
        mkdir -p /home/vllm/logs
        mkdir -p /home/vllm/data
        chmod 755 /home/vllm
    "
    
    if ! pct exec "$container_id" -- bash -c "$create_dirs_cmd"; then
        log_error "Failed to create directories in container $container_id"
        return 1
    fi
    
    log_info "Container environment setup completed for $container_id"
}

# --- Enhanced NVIDIA Driver Setup ---
setup_nvidia_drivers_in_container() {
    local container_id="$1"
    
    log_info "Setting up NVIDIA drivers in container $container_id..."
    
    # Check if we have GPU assignment
    local gpu_assignment
    gpu_assignment=$(get_gpu_assignment "$container_id")
    
    if [[ -z "$gpu_assignment" || "$gpu_assignment" == "none" ]]; then
        log_info "No GPU assignment for container $container_id, skipping NVIDIA driver setup"
        return 0
    fi
    
    # Install NVIDIA drivers in container if needed
    local nvidia_install_cmd="
        # Update package list
        apt update
        
        # Check if NVIDIA drivers are already installed
        if command -v nvidia-smi >/dev/null 2>&1; then
            echo 'NVIDIA drivers already installed'
        else
            # Install NVIDIA driver with version from configuration
            echo 'Installing NVIDIA drivers...'
            apt install -y wget gnupg
            wget https://developer.download.nvidia.com/compute/cuda/repos/debian12/x86_64/cuda-keyring_1.0-1_all.deb
            dpkg -i cuda-keyring_1.0-1_all.deb
            apt-get update
            apt-get install -y cuda-drivers=$NVIDIA_DRIVER_VERSION-1
        fi
        
        # Verify installation
        if command -v nvidia-smi >/dev/null 2>&1; then
            echo 'NVIDIA driver setup completed successfully'
        else
            echo 'Warning: NVIDIA driver setup may have failed'
        fi
    "
    
    if ! pct exec "$container_id" -- bash -c "$nvidia_install_cmd"; then
        log_error "Failed to install NVIDIA drivers in container $container_id"
        return 1
    fi
    
    log_info "NVIDIA driver setup completed for container $container_id"
}

# --- Enhanced vLLM Installation ---
setup_vllm() {
    local container_id="$1"
    
    log_info "Installing vLLM in container $container_id..."
    
    # Check if we're using GPU or CPU
    local gpu_assignment
    gpu_assignment=$(get_gpu_assignment "$container_id")
    
    local install_cmd=""
    
    if [[ -n "$gpu_assignment" && "$gpu_assignment" != "none" ]]; then
        log_info "Installing vLLM with GPU support for container $container_id"
        
        # Install vLLM with CUDA support
        install_cmd="
            apt update
            apt install -y python3-pip python3-dev git build-essential
            pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121
            pip install vllm[cuda] --no-cache-dir
        "
    else
        log_info "Installing vLLM with CPU support for container $container_id"
        
        # Install vLLM with CPU support (slower but functional)
        install_cmd="
            apt update
            apt install -y python3-pip python3-dev git build-essential
            pip install vllm --no-cache-dir
        "
    fi
    
    if ! pct exec "$container_id" -- bash -c "$install_cmd"; then
        log_error "Failed to install vLLM in container $container_id"
        return 1
    fi
    
    log_info "vLLM installation completed for container $container_id"
}

# --- Enhanced Model Setup ---
setup_model() {
    local container_id="$1"
    
    log_info "Setting up model for container $container_id..."
    
    # Get model configuration from JSON
    local vllm_model
    vllm_model=$(jq -r ".lxc_configs.\"$container_id\".vllm_model // \"mistralai/Devstral-Small-2507-Q5_K_M.gguf\"" "$PHOENIX_LXC_CONFIG_FILE")
    
    log_info "Model to install: $vllm_model"
    
    # Create model download command
    local model_cmd="
        mkdir -p /home/vllm/models
        cd /home/vllm/models
        
        # Check if model already exists
        if [ -f \"$vllm_model\" ]; then
            echo 'Model already exists'
        else
            echo 'Downloading model: $vllm_model'
            # In a real setup, this would download the model
            echo 'Model download placeholder completed'
        fi
        
        echo 'Model setup complete'
    "
    
    if ! pct exec "$container_id" -- bash -c "$model_cmd"; then
        log_error "Failed to set up model in container $container_id"
        return 1
    fi
    
    log_info "Model setup completed for container $container_id"
}

# --- Enhanced Service Configuration ---
setup_service() {
    local container_id="$1"
    
    log_info "Setting up service configuration for container $container_id..."
    
    # Get API port from configuration
    local api_port
    api_port=$(jq -r ".lxc_configs.\"$container_id\".vllm_api_port // 8000" "$PHOENIX_LXC_CONFIG_FILE")
    
    log_info "API port configured: $api_port"
    
    # Create systemd service file for vLLM
    local service_cmd="
        mkdir -p /etc/systemd/system
        
        cat > /etc/systemd/system/vllm-$container_id.service << EOF
[Unit]
Description=vLLM Service for container $container_id
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/home/vllm
ExecStart=/usr/local/bin/python3 -m vllm.entrypoints.api_server --host 0.0.0.0 --port $api_port --model \"$vllm_model\"
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
        
        systemctl daemon-reload
        systemctl enable vllm-$container_id.service
        echo 'Service setup complete'
    "
    
    if ! pct exec "$container_id" -- bash -c "$service_cmd"; then
        log_warn "Failed to set up systemd service in container $container_id (may be normal for LXC)"
        # This is expected in LXC containers, so we don't fail here
    fi
    
    log_info "Service configuration completed for container $container_id"
}

# --- Enhanced Configuration Validation ---
validate_setup() {
    local container_id="$1"
    
    log_info "Validating setup for container $container_id..."
    
    # Check if vLLM is installed
    local vllm_check_cmd="python3 -c 'import vllm; print(\"vLLM version:\", vllm.__version__)' 2>/dev/null || echo 'not_installed'"
    local vllm_version
    vllm_version=$(pct exec "$container_id" -- bash -c "$vllm_check_cmd")
    
    if [[ "$vllm_version" == "not_installed" ]]; then
        log_warn "vLLM not found in container $container_id"
        return 1
    else
        log_info "vLLM version found: $vllm_version"
    fi
    
    # Check if model directory exists
    local model_check_cmd="ls -la /home/vllm/models 2>/dev/null | wc -l"
    local model_count
    model_count=$(pct exec "$container_id" -- bash -c "$model_check_cmd")
    
    if [[ "$model_count" -gt 0 ]]; then
        log_info "Model directory verified with $model_count items"
    else
        log_warn "Model directory appears empty or missing"
    fi
    
    log_info "Setup validation completed for container $container_id"
}

# --- Enhanced Main Function ---
main() {
    log_info "Starting drdevstral container setup process..."
    echo ""
    echo "==============================================="
    echo "DRDEVSTRAL CONTAINER SETUP"
    echo "==============================================="
    echo ""
    
    # Verify prerequisites
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root"
        exit 1
    fi
    
    # Get container ID from arguments
    local container_id="${1:-901}"
    
    # Validate container ID format
    if ! validate_lxc_id "$container_id"; then
        log_error "Invalid container ID format: $container_id"
        exit 1
    fi
    
    # Validate configuration exists for this container
    if ! validate_container_config "$container_id"; then
        log_error "No configuration found for container ID: $container_id"
        exit 1
    fi
    
    echo ""
    echo "Setup Configuration:"
    echo "--------------------"
    echo "Container ID: $container_id"
    
    # Show GPU assignment
    local gpu_assignment
    gpu_assignment=$(get_gpu_assignment "$container_id")
    echo "GPU Assignment: $gpu_assignment"
    
    # Show model configuration
    local vllm_model
    vllm_model=$(jq -r ".lxc_configs.\"$container_id\".vllm_model // \"default_model\"" "$PHOENIX_LXC_CONFIG_FILE")
    echo "Model: $vllm_model"
    
    echo ""
    read -p "Do you want to proceed with setup? (yes/no): " confirm
    if [[ "$confirm" != "yes" ]]; then
        log_info "Setup cancelled by user."
        exit 0
    fi
    
    # Setup container environment
    if ! setup_container_environment "$container_id"; then
        log_error "Container environment setup failed for $container_id"
        exit 1
    fi
    
    # Setup NVIDIA drivers (if needed)
    if ! setup_nvidia_drivers_in_container "$container_id"; then
        log_warn "NVIDIA driver setup had issues, continuing with CPU setup"
    fi
    
    # Install vLLM
    if ! setup_vllm "$container_id"; then
        log_error "vLLM installation failed for $container_id"
        exit 1
    fi
    
    # Setup model
    if ! setup_model "$container_id"; then
        log_error "Model setup failed for $container_id"
        exit 1
    fi
    
    # Setup service
    if ! setup_service "$container_id"; then
        log_warn "Service setup encountered issues (expected in LXC)"
    fi
    
    # Validate setup
    if ! validate_setup "$container_id"; then
        log_warn "Setup validation had some issues"
    fi
    
    echo ""
    echo "==============================================="
    echo "SETUP COMPLETED SUCCESSFULLY"
    echo "Container ID: $container_id"
    echo "Status: SUCCESS"
    echo "==============================================="
    
    log_info "drdevstral container setup completed for $container_id"
}

main "$@"