#!/bin/bash
# Phoenix Hypervisor Setup vLLM DevStral Script
# Source common functions and configuration
source /usr/local/bin/phoenix_hypervisor_common.sh || { echo "Error: Failed to source phoenix_hypervisor_common.sh" >&2; exit 1; }
source /usr/local/bin/phoenix_hypervisor_config.sh || { echo "Error: Failed to source phoenix_hypervisor_config.sh" >&2; exit 1; }

# Check if running as root
check_root

# Set up logging
load_hypervisor_config
export LOGFILE="$HYPERVISOR_LOGFILE"
setup_logging

log "INFO" "Starting phoenix_lxc_setup_vllm_devstral.sh for LXC $VLLM_LXC_ID"

# Create marker directory if not exists
mkdir -p "$HYPERVISOR_MARKER_DIR"

# Define the marker file path for this script's completion status
marker_file="${HYPERVISOR_MARKER_DIR}/lxc_${VLLM_LXC_ID}_setup_vllm_devstral.marker"

# Skip if the setup has already been completed (marker file exists)
if is_script_completed "$marker_file"; then
    log "INFO" "vLLM DevStral LXC $VLLM_LXC_ID already set up (marker found). Skipping setup."
    exit 0
fi

# Function to install NVIDIA drivers and vLLM in an LXC container
install_vllm_devstral_in_lxc() {
    local lxc_id="$1"
    log "INFO" "Setting up vLLM DevStral in LXC $lxc_id with NVIDIA GPU support..."

    # Ensure the LXC is running before attempting setup
    execute_in_lxc "$lxc_id" "systemctl start networking"
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Failed to start networking in LXC $lxc_id. Aborting setup."
        exit 1
    fi

    # Update package lists
    execute_in_lxc "$lxc_id" "apt-get update"
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Failed to update package lists in LXC $lxc_id. Aborting setup."
        exit 1
    fi

    # Install prerequisites
    execute_in_lxc "$lxc_id" "apt-get install -y apt-transport-https ca-certificates curl software-properties-common gnupg"
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Failed to install prerequisites in LXC $lxc_id. Aborting setup."
        exit 1
    fi

    # Install NVIDIA container toolkit
    execute_in_lxc "$lxc_id" 'curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg'
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Failed to add NVIDIA container toolkit GPG key in LXC $lxc_id. Aborting setup."
        exit 1
    fi

    execute_in_lxc "$lxc_id" 'curl -fsSL https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | sed "s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g" | tee /etc/apt/sources.list.d/nvidia-container-toolkit.list'
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Failed to add NVIDIA container toolkit repository in LXC $lxc_id. Aborting setup."
        exit 1
    fi

    # Update package lists after adding NVIDIA repo
    execute_in_lxc "$lxc_id" "apt-get update"
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Failed to update package lists after adding NVIDIA repository in LXC $lxc_id. Aborting setup."
        exit 1
    fi

    # Install NVIDIA container toolkit
    execute_in_lxc "$lxc_id" "apt-get install -y nvidia-container-toolkit"
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Failed to install NVIDIA container toolkit in LXC $lxc_id. Aborting setup."
        exit 1
    fi

    # Install Docker Engine
    execute_in_lxc "$lxc_id" "apt-get install -y docker.io"
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Failed to install Docker in LXC $lxc_id. Aborting setup."
        exit 1
    fi

    # Configure NVIDIA container runtime as default
    execute_in_lxc "$lxc_id" 'cat > /etc/docker/daemon.json <<EOF
{
    "default-runtime": "nvidia",
    "runtimes": {
        "nvidia": {
            "args": [],
            "path": "nvidia-container-runtime"
        }
    }
}
EOF'
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Failed to configure NVIDIA container runtime in LXC $lxc_id. Aborting setup."
        exit 1
    fi

    # Enable and start the Docker service within the container
    execute_in_lxc "$lxc_id" "systemctl enable --now docker"
    if [[ $? -ne 0 ]]; then
        log "WARN" "Failed to enable Docker service in LXC $lxc_id (might not be critical)."
    fi

    # Restart Docker to apply NVIDIA configuration
    execute_in_lxc "$lxc_id" "systemctl restart docker"
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Failed to restart Docker service in LXC $lxc_id. Aborting setup."
        exit 1
    fi

    # Test NVIDIA access in Docker
    log "INFO" "Testing NVIDIA access in Docker in LXC $lxc_id..."
    execute_in_lxc "$lxc_id" "docker run --rm nvidia/cuda:11.0.3-base-ubuntu20.04 nvidia-smi"
    exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        log "ERROR" "NVIDIA Docker test failed in LXC $lxc_id. GPU setup might be incomplete."
        exit 1
    else
        log "INFO" "NVIDIA Docker test successful in LXC $lxc_id."
    fi

    # Pull vLLM Docker image
    log "INFO" "Pulling vLLM Docker image in LXC $lxc_id..."
    execute_in_lxc "$lxc_id" "docker pull nvcr.io/nvidia/vllm:latest"
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Failed to pull vLLM Docker image in LXC $lxc_id. Aborting setup."
        exit 1
    fi

    # Create vLLM startup script
    execute_in_lxc "$lxc_id" 'cat > /usr/local/bin/start-vllm-devstral.sh <<EOF
#!/bin/bash
# vLLM DevStral startup script
docker run --gpus all \
  --shm-size=10.24gb \
  -p 8000:8000 \
  -v ~/.cache/huggingface:/root/.cache/huggingface \
  --name vllm-devstral \
  --restart unless-stopped \
  nvcr.io/nvidia/vllm:latest \
  --host 0.0.0.0 \
  --port 8000 \
  --model stabilityai/devstral-small-8bit \
  --tensor-parallel-size 2 \
  --max-model-len 8192 \
  --quantization awq
EOF'
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Failed to create vLLM startup script in LXC $lxc_id. Aborting setup."
        exit 1
    fi

    # Make the script executable
    execute_in_lxc "$lxc_id" "chmod +x /usr/local/bin/start-vllm-devstral.sh"
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Failed to make vLLM startup script executable in LXC $lxc_id. Aborting setup."
        exit 1
    fi

    # Create systemd service for vLLM
    execute_in_lxc "$lxc_id" 'cat > /etc/systemd/system/vllm-devstral.service <<EOF
[Unit]
Description=vLLM DevStral Service
After=docker.service
Requires=docker.service

[Service]
Type=forking
ExecStart=/usr/local/bin/start-vllm-devstral.sh
ExecStop=/usr/bin/docker stop vllm-devstral
ExecStopPost=/usr/bin/docker rm vllm-devstral
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF'
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Failed to create vLLM systemd service in LXC $lxc_id. Aborting setup."
        exit 1
    fi

    # Enable and start the vLLM service
    execute_in_lxc "$lxc_id" "systemctl daemon-reload"
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Failed to reload systemd in LXC $lxc_id. Aborting setup."
        exit 1
    fi

    execute_in_lxc "$lxc_id" "systemctl enable vllm-devstral"
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Failed to enable vLLM service in LXC $lxc_id. Aborting setup."
        exit 1
    fi

    # Test vLLM installation by starting the service
    log "INFO" "Starting vLLM DevStral service in LXC $lxc_id..."
    execute_in_lxc "$lxc_id" "systemctl start vllm-devstral"
    exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        log "ERROR" "Failed to start vLLM DevStral service in LXC $lxc_id."
        exit 1
    else
        log "INFO" "vLLM DevStral service started successfully in LXC $lxc_id."
    fi

    # Wait a moment for the service to initialize
    sleep 10

    # Check if the service is running
    execute_in_lxc "$lxc_id" "systemctl is-active --quiet vllm-devstral"
    if [[ $? -ne 0 ]]; then
        log "ERROR" "vLLM DevStral service is not running in LXC $lxc_id."
        exit 1
    else
        log "INFO" "vLLM DevStral service is active in LXC $lxc_id."
    fi

    # Mark the completion of vLLM DevStral setup for this container
    mark_script_completed "$marker_file"
}

# Install vLLM DevStral in the specified LXC container
install_vllm_devstral_in_lxc "$VLLM_LXC_ID"

log "INFO" "Completed phoenix_lxc_setup_vllm_devstral.sh successfully for LXC $VLLM_LXC_ID."
exit 0